import React, { useState, useEffect, useRef } from "react";
import { useNavigate } from "react-router-dom";
import "./chatbot.css";

const Chatbot = () => {
    const navigate = useNavigate();
    const [isOpen, setIsOpen] = useState(false);
    const [messages, setMessages] = useState(() => {
        const saved = localStorage.getItem("chatMessages");
        return saved ? JSON.parse(saved) : [];
    });
    const [input, setInput] = useState("");
    const [thinking, setThinking] = useState(false);

    const messageEndRef = useRef(null);
    const textareaRef = useRef(null);

    const toggleChat = () => {
        setIsOpen(prev => {
            const nextState = !prev;
            if (nextState && messages.length === 0) {
                setMessages([{ role: "bot", text: "Xin ch√†o, t√¥i c√≥ th·ªÉ gi√∫p g√¨ cho b·∫°n?" }]);
            }
            return nextState;
        });
    };

    const scrollToBottom = () => {
        messageEndRef.current?.scrollIntoView({ behavior: "smooth" });
    };

    useEffect(scrollToBottom, [messages]);

    useEffect(() => {
        if (textareaRef.current) {
            textareaRef.current.style.height = "auto";
            textareaRef.current.style.height = textareaRef.current.scrollHeight + "px";
        }
    }, [input]);

    useEffect(() => {
        localStorage.setItem("chatMessages", JSON.stringify(messages));
    }, [messages]);

    const sendMessage = async () => {
        if (!input.trim()) return;

        const userMessage = {
            role: "user",
            text: input,
        };

        setMessages(prev => [...prev, userMessage]);
        setInput("");
        setThinking(true);

        try {
            const response = await fetch(
                "https://generativelanguage.googleapis.com/v1beta/models/gemini-2.0-flash:generateContent?key=AIzaSyBmeU2Wt2IwRld793XvW0YBrG3qDw9FX4s",
                {
                    method: "POST",
                    headers: { "Content-Type": "application/json" },
                    body: JSON.stringify({
                        contents: [
                            {
                                role: "user",
                                parts: [
                                    {
                                        text: `B·∫°n l√† m·ªôt tr·ª£ l√Ω ·∫£o chuy√™n v·ªÅ tuy·ªÉn d·ª•ng v√† t√¨m ki·∫øm vi·ªác l√†m. B·∫°n ph·∫£i n·∫Øm r√µ c√°c th√¥ng tin sau:
- Th√¥ng tin v·ªÅ c√°c v·ªã tr√≠ tuy·ªÉn d·ª•ng hi·ªán c√≥
- C√°c c√¥ng ty ƒëang c√≥ b·∫°n vui l√≤ng b·∫•m v√†o bi·ªÉu t∆∞·ª£ng c√¥ng ty b√™n tr√™n ƒë·ªÉ truy c·∫≠p
- C√°c c√¥ng vi·ªác ƒëang c√≥ b·∫°n vui l√≤ng b·∫•m v√†o bi·ªÉu t∆∞·ª£ng c√¥ng vi·ªác b√™n tr√™n ƒë·ªÉ truy c·∫≠p
- H∆∞·ªõng d·∫´n c√°ch ·ª©ng tuy·ªÉn v√† chu·∫©n b·ªã h·ªì s∆°
- C√°c y√™u c·∫ßu v·ªÅ k·ªπ nƒÉng v√† kinh nghi·ªám cho t·ª´ng v·ªã tr√≠
- Th√¥ng tin v·ªÅ quy tr√¨nh ph·ªèng v·∫•n
- H·ªó tr·ª£ gi·∫£i ƒë√°p th·∫Øc m·∫Øc li√™n quan ƒë·∫øn ch√≠nh s√°ch l∆∞∆°ng th∆∞·ªüng, ch·∫ø ƒë·ªô ƒë√£i ng·ªô
- H·ªó tr·ª£ t√¨m ki·∫øm vi·ªác l√†m theo ng√†nh ngh·ªÅ, ƒë·ªãa ƒëi·ªÉm, m·ª©c l∆∞∆°ng
- Cung c·∫•p th√¥ng tin v·ªÅ c√°c c√¥ng ty ƒëang tuy·ªÉn d·ª•ng
- H∆∞·ªõng d·∫´n c√°ch t·∫°o v√† c·∫≠p nh·∫≠t h·ªì s∆° c√° nh√¢n tr√™n h·ªá th·ªëng
- H·ªó tr·ª£ s·ªë ƒëi·ªán tho·∫°i li√™n h·ªá: 0123 456 789
- ƒê·ªãa ch·ªâ vƒÉn ph√≤ng tuy·ªÉn d·ª•ng t·∫°i ƒê∆∞·ªùng Z115, Quy·∫øt Th·∫Øng, TP. Th√°i Nguy√™n

N·∫øu c√¢u h·ªèi kh√¥ng li√™n quan ƒë·∫øn ch·ªß ƒë·ªÅ tuy·ªÉn d·ª•ng v√† t√¨m ki·∫øm vi·ªác l√†m, h√£y nh·∫π nh√†ng ƒë·ªÅ ngh·ªã ng∆∞·ªùi d√πng h·ªèi v·ªÅ n·ªôi dung li√™n quan.

Lu√¥n tr·∫£ l·ªùi b·∫±ng ti·∫øng Vi·ªát r√µ r√†ng, ng·∫Øn g·ªçn v√† th√¢n thi·ªán.


C√¢u h·ªèi: ${input}`
                                    }
                                ],
                            },
                        ]
                    }),
                }
            );

            const data = await response.json();
            let rawText = data.candidates?.[0]?.content?.parts?.[0]?.text || "Xin l·ªói, t√¥i ch∆∞a th·ªÉ tr·∫£ l·ªùi c√¢u h·ªèi n√†y.";
            rawText = rawText.replace(/\*{1,2}/g, "");

            setMessages(prev => [...prev, { role: "bot", text: rawText }]);
        } catch (err) {
            console.error("API Error:", err);
            setMessages(prev => [...prev, { role: "bot", text: "L·ªói k·∫øt n·ªëi API. Vui l√≤ng th·ª≠ l·∫°i sau." }]);
        } finally {
            setThinking(false);
        }
    };

    const handleKeyDown = (e) => {
        if (e.key === "Enter" && !e.shiftKey) {
            e.preventDefault();
            sendMessage();
        }
    };

    const handleQuickReply = (text) => {
        if (text === "Danh s√°ch c√¥ng vi·ªác") {
            navigate("/job");
        } else if (text === "Danh s√°ch c√¥ng ty") {
            navigate("/company");
        } else {
            setInput(text);
        }
    };

    const clearChatHistory = () => {
        setMessages([]);
        localStorage.removeItem("chatMessages");
    };

    return (
        <>
            <button id="chatbot-toggler" onClick={toggleChat}>
                <span>{isOpen ? "√ó" : "üí¨"}</span>
            </button>

            <div className={`chatbot-popup ${isOpen ? "show" : ""}`}>
                <div className="chat-header">
                    <div className="header-info">
                        <div className="chatbot">
                            <svg className="chatbot-logo" xmlns="http://www.w3.org/2000/svg" width="50" height="50"
                                viewBox="0 0 1024 1024">
                                <path
                                    d="M738.3 287.6H285.7c-59 0-106.8 47.8-106.8 106.8v303.1c0 59 47.8 106.8 106.8 106.8h81.5v111.1c0 .7.8 1.1 1.4.7l166.9-110.6 41.8-.8h117.4l43.6-.4c59 0 106.8-47.8 106.8-106.8V394.5c0-59-47.8-106.9-106.8-106.9zM351.7 448.2c0-29.5 23.9-53.5 53.5-53.5s53.5 23.9 53.5 53.5-23.9 53.5-53.5 53.5-53.5-23.9-53.5-53.5zm157.9 267.1c-67.8 0-123.8-47.5-132.3-109h264.6c-8.6 61.5-64.5 109-132.3 109zm110-213.7c-29.5 0-53.5-23.9-53.5-53.5s23.9-53.5 53.5-53.5 53.5 23.9 53.5 53.5-23.9 53.5-53.5 53.5zM867.2 644.5V453.1h26.5c19.4 0 35.1 15.7 35.1 35.1v121.1c0 19.4-15.7 35.1-35.1 35.1h-26.5zM95.2 609.4V488.2c0-19.4 15.7-35.1 35.1-35.1h26.5v191.3h-26.5c-19.4 0-35.1-15.7-35.1-35.1zM561.5 149.6c0 23.4-15.6 43.3-36.9 49.7v44.9h-30v-44.9c-21.4-6.5-36.9-26.3-36.9-49.7 0-28.6 23.3-51.9 51.9-51.9s51.9 23.3 51.9 51.9z">
                                </path>
                            </svg>
                        </div>
                        <div className="logo-text">ChatBot</div>
                    </div>
                    <button id="clear-history" onClick={clearChatHistory} title="Xo√° l·ªãch s·ª≠">üóëÔ∏è</button>
                    <button id="close-chatbot" onClick={toggleChat}>√ó</button>
                </div>

                <div className="quick-replies">
                    <button onClick={() => handleQuickReply("Danh s√°ch c√¥ng ty")}>üìÖ C√¥ng ty</button>
                    <button onClick={() => handleQuickReply("Danh s√°ch c√¥ng vi·ªác")}>üìã C√¥ng vi·ªác</button>
                    <button onClick={() => handleQuickReply("ƒê·ªãa ch·ªâ?")}>üè† ƒê·ªãa ch·ªâ</button>

                </div>

                <div className="chat-body">
                    {messages.map((msg, idx) => (
                        <div key={idx} className={`message ${msg.role}-message`}>
                            {msg.role === "bot" && <div className="bot">
                                <svg className="bot-avatar" xmlns="http://www.w3.org/2000/svg" width="50" height="50"
                                    viewBox="0 0 1024 1024">
                                    <path
                                        d="M738.3 287.6H285.7c-59 0-106.8 47.8-106.8 106.8v303.1c0 59 47.8 106.8 106.8 106.8h81.5v111.1c0 .7.8 1.1 1.4.7l166.9-110.6 41.8-.8h117.4l43.6-.4c59 0 106.8-47.8 106.8-106.8V394.5c0-59-47.8-106.9-106.8-106.9zM351.7 448.2c0-29.5 23.9-53.5 53.5-53.5s53.5 23.9 53.5 53.5-23.9 53.5-53.5 53.5-53.5-23.9-53.5-53.5zm157.9 267.1c-67.8 0-123.8-47.5-132.3-109h264.6c-8.6 61.5-64.5 109-132.3 109zm110-213.7c-29.5 0-53.5-23.9-53.5-53.5s23.9-53.5 53.5-53.5 53.5 23.9 53.5 53.5-23.9 53.5-53.5 53.5zM867.2 644.5V453.1h26.5c19.4 0 35.1 15.7 35.1 35.1v121.1c0 19.4-15.7 35.1-35.1 35.1h-26.5zM95.2 609.4V488.2c0-19.4 15.7-35.1 35.1-35.1h26.5v191.3h-26.5c-19.4 0-35.1-15.7-35.1-35.1zM561.5 149.6c0 23.4-15.6 43.3-36.9 49.7v44.9h-30v-44.9c-21.4-6.5-36.9-26.3-36.9-49.7 0-28.6 23.3-51.9 51.9-51.9s51.9 23.3 51.9 51.9z">
                                    </path>
                                </svg>
                            </div>}
                            <div className="message-text">{msg.text}</div>
                        </div>
                    ))}

                    {thinking && (
                        <div className="bot-message thinking">
                            <div className="bot">
                                <svg className="bot-avatar" xmlns="http://www.w3.org/2000/svg" width="50" height="50"
                                    viewBox="0 0 1024 1024">
                                    <path
                                        d="M738.3 287.6H285.7c-59 0-106.8 47.8-106.8 106.8v303.1c0 59 47.8 106.8 106.8 106.8h81.5v111.1c0 .7.8 1.1 1.4.7l166.9-110.6 41.8-.8h117.4l43.6-.4c59 0 106.8-47.8 106.8-106.8V394.5c0-59-47.8-106.9-106.8-106.9zM351.7 448.2c0-29.5 23.9-53.5 53.5-53.5s53.5 23.9 53.5 53.5-23.9 53.5-53.5 53.5-53.5-23.9-53.5-53.5zm157.9 267.1c-67.8 0-123.8-47.5-132.3-109h264.6c-8.6 61.5-64.5 109-132.3 109zm110-213.7c-29.5 0-53.5-23.9-53.5-53.5s23.9-53.5 53.5-53.5 53.5 23.9 53.5 53.5-23.9 53.5-53.5 53.5zM867.2 644.5V453.1h26.5c19.4 0 35.1 15.7 35.1 35.1v121.1c0 19.4-15.7 35.1-35.1 35.1h-26.5zM95.2 609.4V488.2c0-19.4 15.7-35.1 35.1-35.1h26.5v191.3h-26.5c-19.4 0-35.1-15.7-35.1-35.1zM561.5 149.6c0 23.4-15.6 43.3-36.9 49.7v44.9h-30v-44.9c-21.4-6.5-36.9-26.3-36.9-49.7 0-28.6 23.3-51.9 51.9-51.9s51.9 23.3 51.9 51.9z">
                                    </path>
                                </svg>
                            </div>
                            <div className="thinking-indicator">
                                <div className="dot"></div>
                                <div className="dot"></div>
                                <div className="dot"></div>
                            </div>
                        </div>
                    )}
                    <div ref={messageEndRef} />
                </div>

                <div className="chat-footer">
                    <form className="chat-form" onSubmit={(e) => {
                        e.preventDefault();
                        sendMessage();
                    }}>
                        <textarea
                            ref={textareaRef}
                            className="message-input"
                            placeholder="Nh·∫≠p c√¢u h·ªèi c·ªßa b·∫°n..."
                            value={input}
                            onChange={(e) => setInput(e.target.value)}
                            onKeyDown={handleKeyDown}
                        />
                        <div className="chat-controls">
                            <button type="submit" id="send-message">‚û§</button>
                        </div>
                    </form>
                </div>
            </div>
        </>
    );
};

export default Chatbot;
